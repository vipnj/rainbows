package com.recursiveflow.rainbows {    import flash.display.MovieClip;            import com.recursiveflow.shared.config.Environment;            import flash.net.URLRequest;        import flash.display.Sprite;    import flash.events.Event;    import flash.events.MouseEvent;    import flash.events.ProgressEvent;    import flash.geom.Point;        import com.recursiveflow.shared.audio.Player;    import com.recursiveflow.shared.controller.Command;        import com.recursiveflow.rainbows.control.SelectMusicCommand;    import com.recursiveflow.rainbows.view.ButtonPanel;    import com.recursiveflow.rainbows.view.LetterButton;    import com.recursiveflow.rainbows.view.LoadingAnim;    import com.recursiveflow.rainbows.view.RadialVisualizer;    import com.recursiveflow.rainbows.view.RainbowMaker;    import com.recursiveflow.rainbows.view.SimpleRainbowMaker;    import com.recursiveflow.rainbows.control.ToggleFullscreenCommand;        /**     * Top-level class for the Rainbow Visualizer application.     *      * @author Alastair Dant     */    public class Application extends MovieClip     {        internal static const REDRAW_FREQ : Number = 2;        internal static const SOURCES : Array = ["1.mp3", "2.mp3", "3.mp3", "4.mp3", "5.mp3"];                private var isDrawing : Boolean;        private var drawRainbows : Boolean;        private var framesBeforeRedraw : Number;        private var player : Player;        private var environment : Environment;        private var radial : RadialVisualizer;        private var rainbows : SimpleRainbowMaker;        private var loading : LoadingAnim;        private var controlButtons : ButtonPanel;        private var selectorButtons : ButtonPanel;        public function Application(w : Number = 720, h : Number = 450)        {                       player = new Player();            radial = new RadialVisualizer(w / 2, w, h / 2, h * 0.6);            rainbows = new SimpleRainbowMaker(w, h);            loading = new LoadingAnim();            			controlButtons = new ButtonPanel();            selectorButtons = new ButtonPanel();						drawBorder(w, h);						environment = Environment.getInstance();			environment.init(this, start);        }                private function setupButtons() : void        {        	addControlButton("+", RainbowMaker.COLOURS[5], new ToggleFullscreenCommand(this));        	addSelectorButton("1", RainbowMaker.COLOURS[0], SOURCES[0]);        	addSelectorButton("2", RainbowMaker.COLOURS[1], SOURCES[1]);        	addSelectorButton("3", RainbowMaker.COLOURS[2], SOURCES[2]);        	addSelectorButton("4", RainbowMaker.COLOURS[3], SOURCES[3]);        	addSelectorButton("5", RainbowMaker.COLOURS[4], SOURCES[4]);        }                private function addControlButton(caption : String, colour : Number, command : Command) : void        {        	var button:LetterButton = new LetterButton(caption, colour, command);						controlButtons.add(button);	        	        }        private function addSelectorButton(caption : String, colour:Number, musicURL:String) : void        {        	var command:Command = new SelectMusicCommand(this, musicURL);        	var button:LetterButton = new LetterButton(caption, colour, command);        	        	selectorButtons.add(button);        }        private function drawBorder(w : Number, h : Number) : void         {            graphics.lineStyle(1, 0, 1);            graphics.drawRect(0, 0, w - 1, h - 1);        }        public function start(e : Event) : void        {            isDrawing = false;            drawRainbows = true;            framesBeforeRedraw = REDRAW_FREQ;                        setupButtons();                        addChild(rainbows);            addChild(selectorButtons);            addChild(controlButtons);            			selectorButtons.x = 0 - ButtonPanel.PADDING;                        selectorButtons.y = this.height - selectorButtons.height;						controlButtons.x = this.width - controlButtons.width - ButtonPanel.PADDING;                        controlButtons.y = this.height - controlButtons.height;            stage.addEventListener(MouseEvent.MOUSE_DOWN, toggleDrawMode);            stage.addEventListener(MouseEvent.MOUSE_UP, toggleDrawMode);						loadMusic(getSource(SOURCES[0] as String));        }                public function getSource(file : String) : URLRequest        {            return environment.getUrlManager().getResourceURL("sound", file);        }        private function loadMusic(source : URLRequest) : void        {        	addChild(loading);			loading.x = radial.getOrigin().x;            loading.y = radial.getOrigin().y;			loading.start();        	            player.load(source, showLoadProgress, handleSoundLoaded);        	        }        private function showLoadProgress(p : ProgressEvent) : void         {            if (p.bytesLoaded && p.bytesTotal)            {            	loading.update(p.bytesLoaded / p.bytesTotal);            }            else            {            	loading.update(0);            }        }        private function handleSoundLoaded(e : Event) : void        {            rainbows.redraw(0, radial.getOrigin());                        loading.stop();                        if (contains(loading)) removeChild(loading);            addChild(radial);                        player.play();        	            stage.addEventListener(Event.ENTER_FRAME, render);        }                public function changeMusic(source : URLRequest) : void        {        	if (player.getSource() != source.url)        	{	  			radial.reset();	            	            if (contains(radial)) removeChild(radial);	            removeEventListener(Event.ENTER_FRAME, render);	            	            loadMusic(source);        	}        }        private function toggleDrawMode(event : MouseEvent) : void        {            isDrawing = !isDrawing;        }        private function render(event : Event) : void        {            if(--framesBeforeRedraw == 0)            {                radial.update(isDrawing);                radial.updateFilters();                                framesBeforeRedraw = REDRAW_FREQ;            }			else if (drawRainbows)            {                rainbows.redraw(radial.getPeak(), radial.getOrigin());            }        }                public function reactivateRainbowMaker() : void        {        	addChildAt(rainbows,0);        	drawRainbows = true;        }                public function deactivateRainbowMaker() : void        {        	drawRainbows = false;        	if (contains(rainbows)) removeChild(rainbows);        }    }}