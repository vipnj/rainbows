package com.recursiveflow.rainbows.view {    import flash.events.Event;        import flash.display.Sprite;    import flash.geom.Point;        /**     * Uses a ring of expanding, multi-colour discs to represent load progress.     *      * @author Alastair Dant     */    public class LoadingAnim extends Sprite     {        private static const RADIUS : Number = 20;        private static const BALL_COUNT : Number = 7;                private var balls : Array;        private var angles : Array;        private var proportionComplete : Number;        public function LoadingAnim()        {        	initialize();        }                public function start() : void        {            this.proportionComplete = 0;        	addEventListener(Event.ENTER_FRAME, animate);        }                public function update(proportionComplete:Number) : void        {            this.proportionComplete = proportionComplete;        }        public function stop() : void        {        	removeEventListener(Event.ENTER_FRAME, animate);        }                private function initialize() : void        {        	var ball : Particle;        	var angle : Number;        	var location : Point;        	        	balls = [];        	angles = [];            proportionComplete = 0;        	        	for (var i : Number = 0; i < BALL_COUNT; i++)         	{        		ball = new Particle(RADIUS, RainbowMaker.COLOURS[i], 0.6);        		angle = (2 * Math.PI) * (i / BALL_COUNT);        		location = Point.polar(RADIUS + 2, angle);        		        		balls.push(ball);        		        		addChild(ball);        		        		ball.x = location.x;        		ball.y = location.y;            }        }                private function animate(event : Event) : void        {        	for each (var ball : Particle in balls)        	{        		ball.alpha = 0.3 + (proportionComplete * 0.7);        		ball.scaleX = ball.scaleY = 0.2 + proportionComplete;         	}	        	        	rotation += 1;        }    }}